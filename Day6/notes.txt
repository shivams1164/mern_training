

1 start

2 settimeout --

3 end


stack-->

console.log('start');

setTimeout(()=>{console.log('timeout...');},0)

console.log('intermediant');

console.log('end');

callback -->stack
----------------
start
intermediant
end
timeout


setTimeout(() => { console.log('timeout 1 ..'); }, 5000)
console.log('start');
setTimeout(() => { console.log('timeout 2 ..'); }, 4999)
console.log('intermediant');
console.log('end');


callback -->stack
----------------
start
intermediant
end
timeout2
timeout1


Promise 
Inversion of Control (IoC) is an abstract programming principle based on the flow of control (execution of statements/instructions) that should be fully managed by the specific implementation of the framework, which is external to your code.

--> giving Control to some other function




-----------------------------------------------------------------

Backend--->   
------------------------------------------------------------

Latency-->  delay between the client request and the server
Round Trip Latency --> total time taken for the data to travel from the client to the server and back to the client

bandwidth--> Network Bandwidth refers to the maximum amount of data that can be transmitted over a network or communication channel in a given period of time 

Throughput-->Throughput refers to the actual amount of data that is transmitted over a network or communication channel in a given period of time.

processing Time-->  take time for processing the data in the server




http ----> not perform the transaction --> open and readable

https----> it can perform thhe transaction .. SSL Certificate--> encryped form me data transfer hote hai

network intercepter

Ip address, Mac addressrouter, isp,internet dns,http vshttps




REPL--> read evaluate process loop















